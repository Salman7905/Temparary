                                                      Day 14
                                                      -------

1) Threading
2) Function program to validate user input
3) stored procedure (Examples)
_______________________________________________________________________________________________________________________________________________

Threading :- 1)Thred is basically execution of the programs.
             
Example =>

using System;
using System.Threading;
namespace ThreadingProgram
{
           public class MyWork
           {
               public void Work1()
               {
                   Thread.Sleep(7000);      //this function will take 7 seconds to perform the task. 
                   Console.WriteLine("Doing for work one");
               }
               public void Work2()
               {
                   Thread.Sleep(7000);      //this function will take 7 seconds to perform the task.
                   Console.WriteLine("Doing for work two");
               }
           
        public static void Main()   // Main is a thread. Thread means ,it provides the execution to a program.
                                    // or we can say thread is a execution model of the program.
        {
           MyWork myWork = new MyWork();
           myWork.Work1();   // At this point we are invoking the first function , which is callled work1
           myWork.Work2();   // At this point we are invoking the second function , which is callled work2 
        }
    }
}

-------------------------------------------------------------------------------------------------------
The above program which we have written it just synchronous(one after one) programming ,so we can convert synchronous to asynchronous
by two ways 1. Multithreading 
            2. TPL(Taak Parallel Programming)

----------------------------------------------------------------------------------------------------------------------------

Question) create a function ,which validates the user
Answer)

create database taazaadbs;
CREATE DATABASE
 
\c taazaadbs;

You are now connected to database "taazaadbs" as user "postgres".
>>>>>>
   
create table tbl_users
   (
     username character varying(50) not null primary key,
     password character varying(30)
   );
CREATE TABLE
>>>>>>>

insert into tbl_users values('Mike','pass12345'),('DeVilliers','pass54321');
INSERT 0 2
   taazaadbs=# select * from tbl_users;
      username  | password
    ------------+-----------
     Mike       | pass12345
     DeVilliers | pass54321
     (2 rows)

>>>>>>>

create function userValidate(uname character varying, upass character varying)
 returns integer
as 
$$
 begin
   if (select count(*) from tbl_users where username=uname AND password=upass)>0 then 
     return 1;
   else
     return 0;
   end if; 
 end;
$$ language plpgsql;

Output =>

CREATE FUNCTION
 select userValidate('Mike','pass12345');
 uservalidate
--------------
       1

-------------------------------------------------------------------------------------------------------------------------------
Stored Procedure :-
                  Stored Procedures are created to perform one or more DML operations on Database. It is nothing but the group of SQL 
                  statements that accepts some input in the form of parameters and performs some task and may or may not returns a value.
          
                 Stored procedure supports DML operations where function does not support DML operation.

                 
Example :-
                create table accounts (
                id int generated by default as identity,
                name varchar(100) not null,
                balance dec(15, 2) not null,
                primary key(id) 
               ); 
        
               
             insert into accounts(name, balance)
             values('Raju', 10000);
             insert into accounts(name, balance)
             values('Nikhil', 10000);

            

            select * from accounts;
            id |  name  | balance
           ----+--------+----------
             1 | Raju   | 10000.00
             2 | Nikhil | 10000.00
           (2 rows)

            


          create or replace procedure transfer(
   sender int,
   receiver int, 
   amount dec
)
language plpgsql    
as $$
begin
    -- subtracting the amount from the sender's account 
    update accounts 
    set balance = balance - amount 
    where id = sender;

    -- adding the amount to the receiver's account
    update accounts 
    set balance = balance + amount 
    where id = receiver;

    commit;
end;$$;


CREATE PROCEDURE


call transfer(1, 2, 1000);


 SELECT * FROM accounts;
 id |  name  | balance
----+--------+----------
  1 | Raju   |  9000.00
  2 | Nikhil | 11000.00
(2 rows)

-------------------------------------
Example =>

        => create table StoredProTest(id integer primary key,name character varying(20));
           CREATE TABLE
====> Inserting record using stored procedure
          
        => create or replace procedure test_insert(integer, character varying)
           as
           $$
            begin 
               insert into StoredProTest(id,name) values($1,$2); 
               commit;
            end;
            $$ language plpgsql; 

       =>  CREATE PROCEDURE
   
       =>  call test_insert(101,'Mike');
            CALL

       =>  call test_insert(102,'DeVilliers');
           CALL
           
       =>  call test_insert(103,'Robert');
           CALL    

  Output:- select * from StoredProTest;
             id  |    name
            -----+------------
             101 | Mike
             102 | DeVilliers
             103 | Robert
           (3 rows)
 
=====> Updating records using stored procedure
       
       create or replace procedure updateTest(id1 integer,name1 character varying)
       as 
       $$
         begin
            update StoredProTest set name=name1 where id=id1;
            commit;
         end;
       $$ language plpgsql; 
    
       CREATE PROCEDURE

   =>  call updateTest(103,'Chris');
       CALL

Output:-     
         select* from StoredProTest;
         id  |    name
        -----+------------
         101 | Mike
         102 | DeVilliers
         103 | Chris       <= updated
         (3 rows)
